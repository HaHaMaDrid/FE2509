g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
??manipulate
install.packages("manipulate")
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(manipulate)
library(ggplot)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(ggplot)
library(ggplot2)
library(manipulate)
library(ggplot2)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
?geom_line
?aes
qt(0.975,df=9)*30
?qt
qt(0.5,df=9)
qt(0.975,df=9)
qt(0.025,df=9)
2/qt(0.975,df=9)
2/qt(0.95,df=9)
qt(0.95,df=9)
pt(0.95,df=9)
pt(0.975,df=9)
pt(01,df=9)
pt(1,df=9)
pt(2.1,df=9)
pt(2.6,df=9)
pt(1.5,df=9)
qt(0.975,df=9)
qt(0.975,df=9)
2./qt(0.975,df=9)
2./qt(0.95,df=9)
2./qt(0.975,df=9)
qt(0.975,df=9)
qt(0.975,df=9)*sqrt(1.28)
2,70 -1.29
2.70 -1.29
2.70 +1.29
?markdown
#rexp(n, lambda)
data=rexp(10000, 1.25)
plot(data)
hist(data)
lambda=0.2
data=rexp(10000, lambda)
hist(data)
n=40
data=rexp(n, lambda)
plot(data)
hist(data)
mean(data)
s=c()
s
s=c(s,1)
s
s=c(s,1)
s
sim=function(n,lambda){
s=c()
for i in c(1:1000){
set.seed(i)
data=rexp(n, lambda)
s=c(s,mean(data))
}
return(s)
}
for (i in c(1:10)){print(i)}
sim=function(n,lambda){
s=c()
for (i in c(1:1000)){
set.seed(i)
data=rexp(n, lambda)
s=c(s,mean(data))
}
return(s)
}
r=sim(n,lambda)
plot(r)
hist(r)
quantile(x = r,probs = c(0.5))
summary(r)
su=summary(r)
class(uy)
class(su)
su
su['Mean']
su['Mean'][1]
var(r)
s=c()
v=c()
for (i in c(1:1000)){
set.seed(i)
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
summary(s)
summary(v)
theoretical_Mean=1/lambda
theoretical_Var=1/lambda
simluation_Mean=as.numeric(su['Mean'])
simluation_Mean
simulation_Mean=as.numeric(su['Mean'])
simulation_Mean=as.numeric(summary(s)['Mean'])
simulation_Var=as.numeric(summary(v)['Mean'])
theoretical_Mean=1/lambda
theoretical_Var=1/lambda
simulation_Mean
theoretical_Mean
simulation_Var
square(2)
simulation_Mean=as.numeric(summary(s)['Mean'])
simulation_Var=as.numeric(summary(v)['Mean'])
theoretical_Mean=1/lambda
theoretical_Var=(1/lambda)^2
print(simulation_Mean)
print(simulation_Mean, theoretical_Mean)
echo (simulation_Mean, theoretical_Mean)
cat (simulation_Mean, theoretical_Mean)
qqplot(r)
qqplot(s)
qqnorm(r)
qqnorm(s)
qqnorm(v)
hist(v)
hist(s)
rm(lis=ls())
rm(list=ls())
n=40
lambda=0.2
s=c()
v=c()
for (i in c(1:1000)){
set.seed(i)
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
simulation_Mean=as.numeric(summary(s)['Mean'])
simulation_Var=as.numeric(summary(v)['Mean'])
theoretical_Mean=1/lambda
theoretical_Var=(1/lambda)^2
ks.test(s)
shapiro.test(x = s)
shapiro.test(x = v)
?shapiro.test
shapiro.test(rnorm(100, mean = 5, sd = 3))
jarque.bera.test
ks.test?
?
:
?ks.test
ks.test(r,'pnorm')
ks.test(s,'pnorm')
qqnorm(s)
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(s
)
hist(s)
s=c()
v=c()
for (i in c(1:10000)){
set.seed(i)
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
shapiro.test(s)
s=c()
v=c()
for (i in c(1:4000)){
set.seed(i)
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
shapiro.test(s)
plot(s)
summary(s)
hist(s)
qqnorm(s)
library(fBasics)
skewness(s)
kurtosis(s)
data1=rexp(n, lambda)
data2=rexp(n, lambda)
basicStats(data1)
basicStats(data2)
plot(data1)
plot(data2)
n=40
lambda=0.2
s=c()
v=c()
set.seed(1234)
for (i in c(1:1000)){
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
shapiro.test(x = s)
shapiro.test(x = v)
qqnorm(s)
qqnorm(v)
n=400
s=c()
v=c()
set.seed(1234)
for (i in c(1:1000)){
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
shapiro.test(x = s)
shapiro.test(x = v)
hist(v)
n=1000
lambda=0.2
s=c()
v=c()
set.seed(1234)
for (i in c(1:1000)){
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
shapiro.test(x = s)
shapiro.test(x = v)
hist(v)
hist(s)
plot(density(s))
plot(density(v))
library(fPortfolio)
install.packages("fPortfolio")
install.packages("lattice")
densityPlot(s)
?dnorm
rm(list=ls())
n=40
lambda=0.2
s=c()
v=c()
set.seed(12345)
for (i in c(1:1000)){
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
shapiro.test(x = s)
shapiro.test(x = v)
plot(density(s))
plot(density(v))
n=4000
s=c()
v=c()
set.seed(12345)
for (i in c(1:1000)){
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
shapiro.test(x = s)
shapiro.test(x = v)
plot(density(v))
plot(density(s))
s=c()
v=c()
set.seed(12345)
for (i in c(1:10000)){
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
plot(density(s))
plot(density(v))
shapiro.test(v)
ks.test(v,'qnorm')
dim(v)
length(v)
qqnormPlot(v)
x=qqnormPlot(v)
x
x=qqnormPlot(s)
qqnormPlot(s)
qqnormPlot(v)
n=40
lambda=0.2
s=c()
v=c()
set.seed(12345)
for (i in c(1:1000)){
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
qqnormPlot(s)
qqnormPlot(v)
qqnormPlot(s)
qqnorm(s)
qqnorm(v)
s=c()
v=c()
set.seed(2345)
for (i in c(1:1000)){
data=rexp(n, lambda)
s=c(s,mean(data))
v=c(v,var(data))
}
simulation_Mean=as.numeric(summary(s)['Mean'])
simulation_Var=as.numeric(summary(v)['Mean'])
theoretical_Mean=1/lambda
theoretical_Var=(1/lambda)^2
simulation_Mean+1.96*sqrt(simulation_Var/n)*c(-1,1)
#1. Show where the distribution is centered at and compare it to the theoretical center of the distribution.
data(ToothGrowth )
rm(list=ls())
data(ToothGrowth)
objects()
ToothGrowth
head(ToothGrowth)
summary(ToothGrowth)
plot(ToothGrowth)
class(ToothGrowth)
ToothGrowth[ToothGrowth$supp=='VC',]
ToothGrowth[ToothGrowth$supp=='OJ',]
oj=ToothGrowth[ToothGrowth$supp=='OJ',]
vc=ToothGrowth[ToothGrowth$supp=='VC',]
plot(oj$dose,oj$len)
plot(vc$dose,vc$len)
plot(vc$dose,vc$len,main='h')
summary(oj$len)
mean(oj$len)
var(oj$len)
var(vc$len)
mean(vc$len)
oj_mean=mean(oj$len)
oj_var=var(oj$len)
vc_mean=mean(vc$len)
vc_var=var(vc$len)
t.test(vc$len-oj$len)
plot(vc$dose,vc$len,main='h')
plot(vc$dose,vc$len,main='VC')
par(new=T)
plot(oj$dose,oj$len,main='VC vs. OJ')
plot(vc$dose,vc$len,main='VC')
plot(vc$dose,vc$len)
plot(oj$dose,oj$len,main='VC vs. OJ',type = 'b')
plot(rnorm(100),type="l",col=2)
plot(vc$dose,vc$len)
par(new=T)
plot(oj$dose,oj$len,main='VC vs. OJ',col=3)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2)
plot(vc$dose,vc$len)
par(new=T)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2, type="l")
plot(vc$dose,vc$len)
par(new=T)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2)
plot(vc$dose,vc$len)
par(new=T)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2,axes=F)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2,axes=F,xlab = F)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2,axes=F,xlab = '')
plot(oj$dose,oj$len,main='VC vs. OJ',col=2,axes=F,xlab = '',ylab = '')
plot(vc$dose,vc$len)
par(new=T)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2,axes=F,xlab = '',ylab = '')
plot(vc$dose,vc$len,xlab = 'len',ylab = 'dose')
par(new=T)
plot(oj$dose,oj$len,main='VC vs. OJ',col=2,axes=F,xlab = '',ylab = '')
ï¼ŸgarchFit
?garchFit
c(50:50)
c(5:50)
install.packages("rugarch")
library(rugarch)
0.55*0.4
0.45*0.6
h_t = \varepsilon_t
0.55*0.4
1+0.5*0.6^2
library(fGarch)
library(Ecdat)
data(Irates)
r = as.numeric(log(Irates[,2]))
n = length(r)
lagr = r[1:(n-1)]
diffr = r[2:n] - lagr
?garchFit
g=garchFit(~arma(1,0)+garch(1,1),data=diffr, cond.dist = "std")
summary(g)
dat = read.csv("Stock_FX_Bond.csv" ,header=T)
dat = read.csv("Rlab9_Stock_FX_Bond.csv" ,header=T)
prices = as.matrix(dat[1:500,c(3,5,7,9,11)])
head(prices)
dim(prices)
?diffr
??diffr
?diff
diff(1:10, 2)
1:10
diff(prices,1)
mean(diff(prices,1))
r=diff(prices,1)
head(r)
dim(r)
?mean
class(r)
var(r)
mean(r)
colMeans(r)
?colMeans
?var
smv=colMeans(r)
smv
class(smv)
prices[,5000]
prices[,500]
prices[500,]
1000000/prices[500,]
10000000/prices[500,]
floor(10000000/prices[500,])
colMeans(r)
mean(r)
var(r)
"s"
cat('h')
?rnorm
qnorm(0.1)
smv
smv''
t(smv)
smv
#smv %*% matrix(0.2)
rep(0.2,5)
#smv %*% t(matrix(rep(0.2,5)))
smv %*% t(matrix(rep(0.2,5)))
smv
t(matrix(rep(0.2,5)))
matrix(rep(0.2,5))
smv %*% matrix(rep(0.2,5))
#w %*% var(r) %*% t(w)
w=matrix(rep(0.2,5))
w %*% var(r) %*% t(w)
var(r)
ecm=var(r)
w %*% ecm %*% t(w)
w %*% ecm
w
ecm
w %*% matrix(ecm)
t(w) %*% matrix(ecm)
matrix(ecm)
ecm
class(ecm)
t(w) %*% ecm
t(w) %*% ecm %*% w
sqrt(t(w) %*% ecm %*% w)
qnorm(0.1)
#qnorm(0.1,mean = )*
w=matrix(rep(0.2,5))
m=smv %*% w
sigma=sqrt(t(w) %*% ecm %*% w)
qnorm(0.1,mean = m,sd = sigma)
m
sigma
50000000*qnorm(0.1,mean = m,sd = sigma)
50000000*qnorm(0.1,mean = m,sd = sigma)
m
50000000*(m+qnorm(0.1) *sigma)
-50000000*(m+qnorm(0.1) *sigma)
var5day=-S*qnorm(0.1, mean = 5*m,sd = sqrt(5)*sigma)
S=50000000
var5day=-S*qnorm(0.1, mean = 5*m,sd = sqrt(5)*sigma)
var5day
