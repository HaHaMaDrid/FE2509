install.packages("quantreg")
library(qreg)
?quantreg
library(quantreg)
?quantreg
??quantreg
library(quantreg)
data(CPS1988)
?quantreg
objects()
objects(quantreg)
library(AER)
library(quantreg)
data(CPS1988)
library()
library(evir)
install.packages(evir)
install.packages("evir")
library(evir)
library(mva)
library(MVA)
install.packages("MVA")
blood_corr
demo("Ch-PCA")
library("MVA")
blood_corr
demo("Ch-PCA")
demo("Ch-Viz")
library(MVA)
demo("Ch-Viz")
blood_corr
blood_sd
library("RMySQL")
con = dbConnect(MySQL(), user="root", password="wfh168178",
dbname="equities", host="192.168.254.1")
s="EUR.USD"
cmd = sprintf("SELECT dt,o,h,c,l FROM bar15sfx WHERE s='%s' AND dt>'2014-10-28' AND dt<='2014-10-30' ORDER BY dt",s)
print(cmd)
library("RMySQL")
con = dbConnect(MySQL(), user="root", password="wfh168178",
dbname="equities", host="192.168.254.1")
getDF=function(con){
stocks=c('SINA','BABA','BIDU','JD','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN','JMEI')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
debug(getDF)
df=getDF(con)
undebug(getDF)
head(tmp)
head(df)
getDF=function(con){
stocks=c('SINA','BABA','BIDU','JD','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
df=getDF(con)
head(df)
getDF=function(con){
stocks=c('SINA','BABA','BIDU','JD','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
dim(tmp)
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
df=getDF(con)
getDF=function(con){
stocks=c('SINA','BABA','BIDU','JD','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
paste(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
df=getDF(con)
getDF=function(con){
stocks=c('SINA','BABA','BIDU','JD','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
df=getDF(con)
getDF=function(con){
stocks=c('SINA',BIDU','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
getDF=function(con){
stocks=c('SINA',BIDU','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
getDF=function(con){
stocks=c('SINA','BIDU','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
df=getDF(con)
head(df)
dim(df)
tail(df)
cor(df)
?princomp
library("RMySQL")
con = dbConnect(MySQL(), user="root", password="wfh168178",
dbname="equities", host="192.168.254.1")
getDF=function(con){
stocks=c('SINA','BIDU','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
#cm=colMeans(df)
#for (s in stocks){
#  df[s] = df[s]-cm[s]
#}
return(df)
}
df=getDF(con)
?princomp
princomp(df)
p1=princomp(df)
corr(df)
cor(df)
chinaconcept.cor=cor(df)
#p1=princomp(covmat = chinaconcept.cor)
chinaconcept.cor
chinaconcept.cov=cov(df)
chinaconcept.cov
library(MTS)
MTSplot(df)
p1=princomp(covmat = chinaconcept.cor)
p2=princomp(covmat = chinaconcept.cov)
summary(chinaconcept.cor)
summary(chinaconcept.cov)
summary(chinaconcept.cor,loadings=TRUE)
summary(chinaconcept.cov,loadings=TRUE)
summary(chinaconcept.cov,loadings=TRUE)
summary(chinaconcept.cov,loadings=TRUE)
summary(p1,loadings=TRUE)
summary(p2,loadings=TRUE)
p1$loadings
p2$loadings
VAR(df)
ccm(df)
head(df)
getDF=function(con, detrended=TRUE){
stocks=c('SINA','BIDU','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
if(dtrended){
cm=colMeans(df)
for (s in stocks){
df[s] = df[s]-cm[s]
}
}
return(df)
}
diag(c(1,2,3))
chinaconcept.cov
p2$loadings
p2$scale
p2$sdev
p2$scores
p2$n.obs
biplot(df)
biplot(df,col=c('BIDU','QIHU'))
a=matrix(seq(9),3)
a
#X=matrix(seq(9),3)
rnorm(9)
X=matrix(rnorm(9),3)
X
a %*% X
var(a %*% X)
a%*%var(X)%*%t(a)
a
norm(a)
a/24
a=a/24
a
norm(a)
var(a %*% X)
a%*%var(X)%*%t(a)
a%*%t(a)
a
a=matrix(seq(3),3)
a
a=t(a)
a
norm(a)
a=a/norm(a)
a
norm(a)
?norm
a%*%t(a)
norm(a)
library(MTS)
update.packages(checkBuilt=TRUE)
library(MTS)
install.packages("fBasics")
install.packages("fBasics")
install.packages("fBasics")
update.packages(checkBuilt=TRUE)
library("RMySQL")
library(MTS)
con = dbConnect(MySQL(), user="root", password="wfh168178",
dbname="equities", host="192.168.254.1")
getDF=function(con, detrended=TRUE){
stocks=c('SINA','BIDU','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
if(dtrended){
cm=colMeans(df)
for (s in stocks){
df[s] = df[s]-cm[s]
}
}
return(df)
}
df=getDF(con)
chinaconcept.cov=cov(df)
chinaconcept.cor=cor(df)
p1=princomp(covmat = chinaconcept.cor)
p2=princomp(covmat = chinaconcept.cov)
getDF=function(con, detrended=TRUE){
stocks=c('SINA','BIDU','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
if(dtrended){
cm=colMeans(df)
for (s in stocks){
df[s] = df[s]-cm[s]
}
}
return(df)
}
df=getDF(con)
df=getDF(con,TRUE)
getDF=function(con, detrended=TRUE){
stocks=c('SINA','BIDU','NTES','VIPS','QIHU','CTRP','ATHM','YY','WB','SFUN')
df =NA #<- data.frame()
for (s in stocks){
cmd = sprintf("SELECT dt,adjclose AS %s FROM dprice WHERE s='%s'
AND dt>'2014-06-01' AND dt<='2014-10-31' ORDER BY dt",s,s)
print(cmd)
rs  = dbSendQuery(con, cmd)
tmp = fetch(rs, n = -1)
print(dim(tmp))
if(is.data.frame(df)){
df = merge(df,tmp)
}else{
df = tmp
}
}
rownames(df) = df$dt
df=df[,!(names(df) %in% c('dt'))]
if(detrended){
cm=colMeans(df)
for (s in stocks){
df[s] = df[s]-cm[s]
}
}
return(df)
}
df=getDF(con)
chinaconcept.cov=cov(df)
chinaconcept.cor=cor(df)
p1=princomp(covmat = chinaconcept.cor)
p2=princomp(covmat = chinaconcept.cov)
VAR(df)
library(ggplot2)
nrow(diamonds)
system.time(jsonlite::toJSON(diamonds, dataframe = "row"))
jasonlit
install.packages(jasonlit)
install.packages(jasonlite)
install.packages("opencpu")
library(opencpu)
library(devtools)
install_github("gitstats", "opencpu")
library(CausalImpact )
install.packages("CausalImpact")
install.packages("devtools")
library(devtools)
devtools::install_github("google/CausalImpact")
install.packages("devtools")
library(devtools)
devtools::install_github("google/CausalImpact")
library(devtools)
devtools::install_github("google/CausalImpact")
library(CausalImpact)
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10
data <- cbind(y, x1)
dim(data)
plot(data)
library(MTS)
install.packages("fBasics")
install.packages("fBasics")
library(MTS)
library(MTS)
MTSplot(data)
head(data)
matplot(data, type = "l")
?matplot
matpoints(data, type = "l")
matlines(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
